
tic;
for i = 2:206
% nSlice = 56;
img = I(:,:,i);
level = graythresh(img);
BW = imbinarize(img, level);

% Feature extraction
% featuresTemp = struct('Presence', [], ...
%                       'Area', [], ... 
%                       'ConvexArea', [], ...
%                       'Perimeter', [], ...
%                       'Eccentricity', [], ...
%                       'Solidity', [], ...
%                       'Extent', [], ...
%                       'EquivDiameter', [], ...
%                       'MaxIntensity', [], ...
%                       'MeanIntensity', [], ...
%                       'MinIntensity', [], ...
%                       'Variance', [], ...
%                       'StandardDeviation', [], ...
%                       'Contrast', [], ...
%                       'Correlation', [], ...
%                       'Energy', [], ...
%                       'Homogeneity', []);
%                   
featuresTemp = struct('Presence', [], ...
                      'ConvexArea', [], ...
                      'Perimeter', [], ...
                      'Solidity', [], ...

                      'EquivDiameter', [], ...
                      'MaxIntensity', [], ...
                      'MeanIntensity', [], ...
                      'MinIntensity', [], ...
                      'Variance', [], ...
                      'StandardDeviation', [], ...
                      'Contrast', [], ...
                      'Correlation', [], ...
                      'Energy', [], ...
                      'Homogeneity', []);


% Filling holes
if isFill == 1
    BWfill = imfill(BW, 'holes');
elseif isFill == 0
    BWfill = BW;
end
CCfill = bwconncomp(BWfill);
Lfill = labelmatrix(CCfill);
% numFill = CCfill.NumObjects;
% Main feature analysis
featuresFill = regionprops(Lfill,  img, {'Area', ... 
                                         'PixelValues', ...
                                         'Eccentricity', ...
                                         'Solidity', ...
                                         'Extent', ...
                                         'MajorAxisLength', ...
                                         'MinorAxisLength', ... 
                                         'EquivDiameter', ...
                                         'MaxIntensity', ...
                                         'MeanIntensity', ...
                                         'MinIntensity', ...
                                         'Extrema', ...
                                         'BoundingBox',...
                                         'Perimeter', ...
                                         'ConvexArea'});   
numFill = numel(featuresFill);
for count = 1:numFill
        featuresFill(count).StandardDeviation = std(double(featuresFill(count).PixelValues));
        featuresFill(count).Variance = var(double(featuresFill(count).PixelValues));
end
% GLCM analysis
if ~isempty(featuresFill)
    glcm = cell(1, numFill);
    glcmprops = struct('Contrast', [], 'Correlation', [], 'Energy', [], 'Homogeneity', []);
    for count = 1:numFill
        rect = featuresFill(count).BoundingBox;
        croppedImg = imcrop(img, rect);
        glcm{count} = graycomatrix(croppedImg, 'NumLevels', 255);
        glcmprops(count) = graycoprops(glcm{count});
    end
else
    glcmprops = struct([]);
end
% All features
numFeatures = numel(featuresFill);
for count = 1:numFeatures
    for fn = fieldnames(featuresFill)'
       featuresTemp(count).(fn{1}) = featuresFill(count).(fn{1});
    end
end

for count = 1:numFeatures
    for fn = fieldnames(glcmprops)'
       featuresTemp(count).(fn{1}) = glcmprops(count).(fn{1});
    end
end
[featuresTemp(1:numFeatures).Presence] = deal(0);
fieldsToDel = {'Extrema', 'BoundingBox', 'PixelValues'};
featuresTemp = rmfield(featuresTemp,fieldsToDel);
featuresAll = [featuresTemp, featuresAll];
end
toc;